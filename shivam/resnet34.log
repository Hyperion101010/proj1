Use GPU: 0 for training
=> creating model 'resnet34'
=> Dummy data is used!
conv1.weight torch.Size([64, 3, 7, 7])
bn1.weight torch.Size([64])
bn1.bias torch.Size([64])
layer1.0.conv1.weight torch.Size([64, 64, 3, 3])
layer1.0.bn1.weight torch.Size([64])
layer1.0.bn1.bias torch.Size([64])
layer1.0.conv2.weight torch.Size([64, 64, 3, 3])
layer1.0.bn2.weight torch.Size([64])
layer1.0.bn2.bias torch.Size([64])
layer1.1.conv1.weight torch.Size([64, 64, 3, 3])
layer1.1.bn1.weight torch.Size([64])
layer1.1.bn1.bias torch.Size([64])
layer1.1.conv2.weight torch.Size([64, 64, 3, 3])
layer1.1.bn2.weight torch.Size([64])
layer1.1.bn2.bias torch.Size([64])
layer1.2.conv1.weight torch.Size([64, 64, 3, 3])
layer1.2.bn1.weight torch.Size([64])
layer1.2.bn1.bias torch.Size([64])
layer1.2.conv2.weight torch.Size([64, 64, 3, 3])
layer1.2.bn2.weight torch.Size([64])
layer1.2.bn2.bias torch.Size([64])
layer2.0.conv1.weight torch.Size([128, 64, 3, 3])
layer2.0.bn1.weight torch.Size([128])
layer2.0.bn1.bias torch.Size([128])
layer2.0.conv2.weight torch.Size([128, 128, 3, 3])
layer2.0.bn2.weight torch.Size([128])
layer2.0.bn2.bias torch.Size([128])
layer2.0.downsample.0.weight torch.Size([128, 64, 1, 1])
layer2.0.downsample.1.weight torch.Size([128])
layer2.0.downsample.1.bias torch.Size([128])
layer2.1.conv1.weight torch.Size([128, 128, 3, 3])
layer2.1.bn1.weight torch.Size([128])
layer2.1.bn1.bias torch.Size([128])
layer2.1.conv2.weight torch.Size([128, 128, 3, 3])
layer2.1.bn2.weight torch.Size([128])
layer2.1.bn2.bias torch.Size([128])
layer2.2.conv1.weight torch.Size([128, 128, 3, 3])
layer2.2.bn1.weight torch.Size([128])
layer2.2.bn1.bias torch.Size([128])
layer2.2.conv2.weight torch.Size([128, 128, 3, 3])
layer2.2.bn2.weight torch.Size([128])
layer2.2.bn2.bias torch.Size([128])
layer2.3.conv1.weight torch.Size([128, 128, 3, 3])
layer2.3.bn1.weight torch.Size([128])
layer2.3.bn1.bias torch.Size([128])
layer2.3.conv2.weight torch.Size([128, 128, 3, 3])
layer2.3.bn2.weight torch.Size([128])
layer2.3.bn2.bias torch.Size([128])
layer3.0.conv1.weight torch.Size([256, 128, 3, 3])
layer3.0.bn1.weight torch.Size([256])
layer3.0.bn1.bias torch.Size([256])
layer3.0.conv2.weight torch.Size([256, 256, 3, 3])
layer3.0.bn2.weight torch.Size([256])
layer3.0.bn2.bias torch.Size([256])
layer3.0.downsample.0.weight torch.Size([256, 128, 1, 1])
layer3.0.downsample.1.weight torch.Size([256])
layer3.0.downsample.1.bias torch.Size([256])
layer3.1.conv1.weight torch.Size([256, 256, 3, 3])
layer3.1.bn1.weight torch.Size([256])
layer3.1.bn1.bias torch.Size([256])
layer3.1.conv2.weight torch.Size([256, 256, 3, 3])
layer3.1.bn2.weight torch.Size([256])
layer3.1.bn2.bias torch.Size([256])
layer3.2.conv1.weight torch.Size([256, 256, 3, 3])
layer3.2.bn1.weight torch.Size([256])
layer3.2.bn1.bias torch.Size([256])
layer3.2.conv2.weight torch.Size([256, 256, 3, 3])
layer3.2.bn2.weight torch.Size([256])
layer3.2.bn2.bias torch.Size([256])
layer3.3.conv1.weight torch.Size([256, 256, 3, 3])
layer3.3.bn1.weight torch.Size([256])
layer3.3.bn1.bias torch.Size([256])
layer3.3.conv2.weight torch.Size([256, 256, 3, 3])
layer3.3.bn2.weight torch.Size([256])
layer3.3.bn2.bias torch.Size([256])
layer3.4.conv1.weight torch.Size([256, 256, 3, 3])
layer3.4.bn1.weight torch.Size([256])
layer3.4.bn1.bias torch.Size([256])
layer3.4.conv2.weight torch.Size([256, 256, 3, 3])
layer3.4.bn2.weight torch.Size([256])
layer3.4.bn2.bias torch.Size([256])
layer3.5.conv1.weight torch.Size([256, 256, 3, 3])
layer3.5.bn1.weight torch.Size([256])
layer3.5.bn1.bias torch.Size([256])
layer3.5.conv2.weight torch.Size([256, 256, 3, 3])
layer3.5.bn2.weight torch.Size([256])
layer3.5.bn2.bias torch.Size([256])
layer4.0.conv1.weight torch.Size([512, 256, 3, 3])
layer4.0.bn1.weight torch.Size([512])
layer4.0.bn1.bias torch.Size([512])
layer4.0.conv2.weight torch.Size([512, 512, 3, 3])
layer4.0.bn2.weight torch.Size([512])
layer4.0.bn2.bias torch.Size([512])
layer4.0.downsample.0.weight torch.Size([512, 256, 1, 1])
layer4.0.downsample.1.weight torch.Size([512])
layer4.0.downsample.1.bias torch.Size([512])
layer4.1.conv1.weight torch.Size([512, 512, 3, 3])
layer4.1.bn1.weight torch.Size([512])
layer4.1.bn1.bias torch.Size([512])
layer4.1.conv2.weight torch.Size([512, 512, 3, 3])
layer4.1.bn2.weight torch.Size([512])
layer4.1.bn2.bias torch.Size([512])
layer4.2.conv1.weight torch.Size([512, 512, 3, 3])
layer4.2.bn1.weight torch.Size([512])
layer4.2.bn1.bias torch.Size([512])
layer4.2.conv2.weight torch.Size([512, 512, 3, 3])
layer4.2.bn2.weight torch.Size([512])
layer4.2.bn2.bias torch.Size([512])
fc.weight torch.Size([1000, 512])
fc.bias torch.Size([1000])
VE: model ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (3): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (3): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (4): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (5): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc): Linear(in_features=512, out_features=1000, bias=True)
)
Session Started at t: 2025-04-17 11:13:09.017426
Memory at Training Start (GPU): 84.16 MB
Reserved Memory at Start (GPU): 108.00 MB
conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 64, 112, 112])
bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 64, 112, 112])
relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 64, 112, 112])
maxpool: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 64, 56, 56])
layer1.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer2.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 128, 28, 28])
layer2.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 128, 28, 28])
layer2.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 128, 28, 28])
layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 128, 28, 28])
layer2.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 128, 28, 28])
layer3.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 256, 14, 14])
layer3.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 256, 14, 14])
layer3.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 256, 14, 14])
layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 256, 14, 14])
layer3.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 256, 14, 14])
layer4.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 512, 7, 7])
layer4.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 512, 7, 7])
layer4.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 512, 7, 7])
layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 512, 7, 7])
layer4.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 512, 7, 7])
avgpool: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 1, 1])
fc: <class 'torch.nn.modules.linear.Linear'> : torch.Size([1, 512]) : torch.Size([1, 1000])
: <class 'torchvision.models.resnet.ResNet'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 1000])
Epoch: [0][      1/1281167]	Time 87.809 (87.809)	Data  0.136 ( 0.136)	Loss 6.8151e+00 (6.8151e+00)	Acc@1   0.00 (  0.00)	Acc@5   0.00 (  0.00)
conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 64, 112, 112])
bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 64, 112, 112])
relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 64, 112, 112])
maxpool: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 64, 56, 56])
layer1.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer2.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 128, 28, 28])
layer2.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 128, 28, 28])
layer2.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 128, 28, 28])
layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 128, 28, 28])
layer2.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 128, 28, 28])
layer3.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 256, 14, 14])
layer3.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 256, 14, 14])
layer3.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 256, 14, 14])
layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 256, 14, 14])
layer3.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 256, 14, 14])
layer4.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 512, 7, 7])
layer4.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 512, 7, 7])
layer4.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 512, 7, 7])
layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 512, 7, 7])
layer4.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2: <class 'torchvision.models.resnet.BasicBlock'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 512, 7, 7])
avgpool: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 1, 1])
fc: <class 'torch.nn.modules.linear.Linear'> : torch.Size([1, 512]) : torch.Size([1, 1000])
: <class 'torchvision.models.resnet.ResNet'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 1000])
Test: [    1/50000]	Time  0.120 ( 0.120)	Loss 1.8297e+03 (1.8297e+03)	Acc@1   0.00 (  0.00)	Acc@5   0.00 (  0.00)
 *   Acc@1 0.000 Acc@5 0.000
[GPU] Memory Allocated After Training: 270.07 MB
[GPU] Memory Reserved After Training : 392.00 MB
Session Completed at : 2025-04-17 11:14:38.778470
Total Compute Time : 0:01:29.761044
