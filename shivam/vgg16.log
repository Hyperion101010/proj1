Use GPU: 0 for training
=> creating model 'vgg16'
=> Dummy data is used!
features.0.weight torch.Size([64, 3, 3, 3])
features.0.bias torch.Size([64])
features.2.weight torch.Size([64, 64, 3, 3])
features.2.bias torch.Size([64])
features.5.weight torch.Size([128, 64, 3, 3])
features.5.bias torch.Size([128])
features.7.weight torch.Size([128, 128, 3, 3])
features.7.bias torch.Size([128])
features.10.weight torch.Size([256, 128, 3, 3])
features.10.bias torch.Size([256])
features.12.weight torch.Size([256, 256, 3, 3])
features.12.bias torch.Size([256])
features.14.weight torch.Size([256, 256, 3, 3])
features.14.bias torch.Size([256])
features.17.weight torch.Size([512, 256, 3, 3])
features.17.bias torch.Size([512])
features.19.weight torch.Size([512, 512, 3, 3])
features.19.bias torch.Size([512])
features.21.weight torch.Size([512, 512, 3, 3])
features.21.bias torch.Size([512])
features.24.weight torch.Size([512, 512, 3, 3])
features.24.bias torch.Size([512])
features.26.weight torch.Size([512, 512, 3, 3])
features.26.bias torch.Size([512])
features.28.weight torch.Size([512, 512, 3, 3])
features.28.bias torch.Size([512])
classifier.0.weight torch.Size([4096, 25088])
classifier.0.bias torch.Size([4096])
classifier.3.weight torch.Size([4096, 4096])
classifier.3.bias torch.Size([4096])
classifier.6.weight torch.Size([1000, 4096])
classifier.6.bias torch.Size([1000])
VE: model VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU(inplace=True)
    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU(inplace=True)
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU(inplace=True)
    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU(inplace=True)
    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): ReLU(inplace=True)
    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): ReLU(inplace=True)
    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (20): ReLU(inplace=True)
    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (22): ReLU(inplace=True)
    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (25): ReLU(inplace=True)
    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): ReLU(inplace=True)
    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (29): ReLU(inplace=True)
    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=1000, bias=True)
  )
)
Session Started at t: 2025-04-17 11:11:17.982605
Memory at Training Start (GPU): 529.04 MB
Reserved Memory at Start (GPU): 534.00 MB
features.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 64, 224, 224])
features.1: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 224, 224]) : torch.Size([1, 64, 224, 224])
features.2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 224, 224]) : torch.Size([1, 64, 224, 224])
features.3: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 224, 224]) : torch.Size([1, 64, 224, 224])
features.4: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 64, 224, 224]) : torch.Size([1, 64, 112, 112])
features.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 128, 112, 112])
features.6: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 112, 112]) : torch.Size([1, 128, 112, 112])
features.7: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 112, 112]) : torch.Size([1, 128, 112, 112])
features.8: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 112, 112]) : torch.Size([1, 128, 112, 112])
features.9: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 128, 112, 112]) : torch.Size([1, 128, 56, 56])
features.10: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 56, 56]) : torch.Size([1, 256, 56, 56])
features.11: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
features.12: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
features.13: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
features.14: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
features.15: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
features.16: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 28, 28])
features.17: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 28, 28]) : torch.Size([1, 512, 28, 28])
features.18: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
features.19: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
features.20: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
features.21: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
features.22: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
features.23: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 14, 14])
features.24: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
features.25: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
features.26: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
features.27: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
features.28: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
features.29: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
features.30: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 7, 7])
features: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 512, 7, 7])
avgpool: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
classifier.0: <class 'torch.nn.modules.linear.Linear'> : torch.Size([1, 25088]) : torch.Size([1, 4096])
classifier.1: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 4096]) : torch.Size([1, 4096])
classifier.2: <class 'torch.nn.modules.dropout.Dropout'> : torch.Size([1, 4096]) : torch.Size([1, 4096])
classifier.3: <class 'torch.nn.modules.linear.Linear'> : torch.Size([1, 4096]) : torch.Size([1, 4096])
classifier.4: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 4096]) : torch.Size([1, 4096])
classifier.5: <class 'torch.nn.modules.dropout.Dropout'> : torch.Size([1, 4096]) : torch.Size([1, 4096])
classifier.6: <class 'torch.nn.modules.linear.Linear'> : torch.Size([1, 4096]) : torch.Size([1, 1000])
classifier: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 25088]) : torch.Size([1, 1000])
: <class 'torchvision.models.vgg.VGG'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 1000])
Epoch: [0][      1/1281167]	Time 42.537 (42.537)	Data  0.146 ( 0.146)	Loss 6.8755e+00 (6.8755e+00)	Acc@1   0.00 (  0.00)	Acc@5   0.00 (  0.00)
features.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 64, 224, 224])
features.1: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 224, 224]) : torch.Size([1, 64, 224, 224])
features.2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 224, 224]) : torch.Size([1, 64, 224, 224])
features.3: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 224, 224]) : torch.Size([1, 64, 224, 224])
features.4: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 64, 224, 224]) : torch.Size([1, 64, 112, 112])
features.5: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 128, 112, 112])
features.6: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 112, 112]) : torch.Size([1, 128, 112, 112])
features.7: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 112, 112]) : torch.Size([1, 128, 112, 112])
features.8: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 112, 112]) : torch.Size([1, 128, 112, 112])
features.9: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 128, 112, 112]) : torch.Size([1, 128, 56, 56])
features.10: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 56, 56]) : torch.Size([1, 256, 56, 56])
features.11: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
features.12: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
features.13: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
features.14: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
features.15: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
features.16: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 28, 28])
features.17: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 28, 28]) : torch.Size([1, 512, 28, 28])
features.18: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
features.19: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
features.20: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
features.21: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
features.22: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
features.23: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 14, 14])
features.24: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
features.25: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
features.26: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
features.27: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
features.28: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
features.29: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
features.30: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 7, 7])
features: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 512, 7, 7])
avgpool: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
classifier.0: <class 'torch.nn.modules.linear.Linear'> : torch.Size([1, 25088]) : torch.Size([1, 4096])
classifier.1: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 4096]) : torch.Size([1, 4096])
classifier.2: <class 'torch.nn.modules.dropout.Dropout'> : torch.Size([1, 4096]) : torch.Size([1, 4096])
classifier.3: <class 'torch.nn.modules.linear.Linear'> : torch.Size([1, 4096]) : torch.Size([1, 4096])
classifier.4: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 4096]) : torch.Size([1, 4096])
classifier.5: <class 'torch.nn.modules.dropout.Dropout'> : torch.Size([1, 4096]) : torch.Size([1, 4096])
classifier.6: <class 'torch.nn.modules.linear.Linear'> : torch.Size([1, 4096]) : torch.Size([1, 1000])
classifier: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 25088]) : torch.Size([1, 1000])
: <class 'torchvision.models.vgg.VGG'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 1000])
Test: [    1/50000]	Time  0.089 ( 0.089)	Loss 7.1648e+00 (7.1648e+00)	Acc@1   0.00 (  0.00)	Acc@5   0.00 (  0.00)
 *   Acc@1 0.000 Acc@5 0.000
[GPU] Memory Allocated After Training: 1604.57 MB
[GPU] Memory Reserved After Training : 2180.00 MB
Session Completed at : 2025-04-17 11:12:06.078292
Total Compute Time : 0:00:48.095687
