Use GPU: 0 for training
=> creating model 'resnet152'
=> Dummy data is used!
conv1.weight torch.Size([64, 3, 7, 7])
bn1.weight torch.Size([64])
bn1.bias torch.Size([64])
layer1.0.conv1.weight torch.Size([64, 64, 1, 1])
layer1.0.bn1.weight torch.Size([64])
layer1.0.bn1.bias torch.Size([64])
layer1.0.conv2.weight torch.Size([64, 64, 3, 3])
layer1.0.bn2.weight torch.Size([64])
layer1.0.bn2.bias torch.Size([64])
layer1.0.conv3.weight torch.Size([256, 64, 1, 1])
layer1.0.bn3.weight torch.Size([256])
layer1.0.bn3.bias torch.Size([256])
layer1.0.downsample.0.weight torch.Size([256, 64, 1, 1])
layer1.0.downsample.1.weight torch.Size([256])
layer1.0.downsample.1.bias torch.Size([256])
layer1.1.conv1.weight torch.Size([64, 256, 1, 1])
layer1.1.bn1.weight torch.Size([64])
layer1.1.bn1.bias torch.Size([64])
layer1.1.conv2.weight torch.Size([64, 64, 3, 3])
layer1.1.bn2.weight torch.Size([64])
layer1.1.bn2.bias torch.Size([64])
layer1.1.conv3.weight torch.Size([256, 64, 1, 1])
layer1.1.bn3.weight torch.Size([256])
layer1.1.bn3.bias torch.Size([256])
layer1.2.conv1.weight torch.Size([64, 256, 1, 1])
layer1.2.bn1.weight torch.Size([64])
layer1.2.bn1.bias torch.Size([64])
layer1.2.conv2.weight torch.Size([64, 64, 3, 3])
layer1.2.bn2.weight torch.Size([64])
layer1.2.bn2.bias torch.Size([64])
layer1.2.conv3.weight torch.Size([256, 64, 1, 1])
layer1.2.bn3.weight torch.Size([256])
layer1.2.bn3.bias torch.Size([256])
layer2.0.conv1.weight torch.Size([128, 256, 1, 1])
layer2.0.bn1.weight torch.Size([128])
layer2.0.bn1.bias torch.Size([128])
layer2.0.conv2.weight torch.Size([128, 128, 3, 3])
layer2.0.bn2.weight torch.Size([128])
layer2.0.bn2.bias torch.Size([128])
layer2.0.conv3.weight torch.Size([512, 128, 1, 1])
layer2.0.bn3.weight torch.Size([512])
layer2.0.bn3.bias torch.Size([512])
layer2.0.downsample.0.weight torch.Size([512, 256, 1, 1])
layer2.0.downsample.1.weight torch.Size([512])
layer2.0.downsample.1.bias torch.Size([512])
layer2.1.conv1.weight torch.Size([128, 512, 1, 1])
layer2.1.bn1.weight torch.Size([128])
layer2.1.bn1.bias torch.Size([128])
layer2.1.conv2.weight torch.Size([128, 128, 3, 3])
layer2.1.bn2.weight torch.Size([128])
layer2.1.bn2.bias torch.Size([128])
layer2.1.conv3.weight torch.Size([512, 128, 1, 1])
layer2.1.bn3.weight torch.Size([512])
layer2.1.bn3.bias torch.Size([512])
layer2.2.conv1.weight torch.Size([128, 512, 1, 1])
layer2.2.bn1.weight torch.Size([128])
layer2.2.bn1.bias torch.Size([128])
layer2.2.conv2.weight torch.Size([128, 128, 3, 3])
layer2.2.bn2.weight torch.Size([128])
layer2.2.bn2.bias torch.Size([128])
layer2.2.conv3.weight torch.Size([512, 128, 1, 1])
layer2.2.bn3.weight torch.Size([512])
layer2.2.bn3.bias torch.Size([512])
layer2.3.conv1.weight torch.Size([128, 512, 1, 1])
layer2.3.bn1.weight torch.Size([128])
layer2.3.bn1.bias torch.Size([128])
layer2.3.conv2.weight torch.Size([128, 128, 3, 3])
layer2.3.bn2.weight torch.Size([128])
layer2.3.bn2.bias torch.Size([128])
layer2.3.conv3.weight torch.Size([512, 128, 1, 1])
layer2.3.bn3.weight torch.Size([512])
layer2.3.bn3.bias torch.Size([512])
layer2.4.conv1.weight torch.Size([128, 512, 1, 1])
layer2.4.bn1.weight torch.Size([128])
layer2.4.bn1.bias torch.Size([128])
layer2.4.conv2.weight torch.Size([128, 128, 3, 3])
layer2.4.bn2.weight torch.Size([128])
layer2.4.bn2.bias torch.Size([128])
layer2.4.conv3.weight torch.Size([512, 128, 1, 1])
layer2.4.bn3.weight torch.Size([512])
layer2.4.bn3.bias torch.Size([512])
layer2.5.conv1.weight torch.Size([128, 512, 1, 1])
layer2.5.bn1.weight torch.Size([128])
layer2.5.bn1.bias torch.Size([128])
layer2.5.conv2.weight torch.Size([128, 128, 3, 3])
layer2.5.bn2.weight torch.Size([128])
layer2.5.bn2.bias torch.Size([128])
layer2.5.conv3.weight torch.Size([512, 128, 1, 1])
layer2.5.bn3.weight torch.Size([512])
layer2.5.bn3.bias torch.Size([512])
layer2.6.conv1.weight torch.Size([128, 512, 1, 1])
layer2.6.bn1.weight torch.Size([128])
layer2.6.bn1.bias torch.Size([128])
layer2.6.conv2.weight torch.Size([128, 128, 3, 3])
layer2.6.bn2.weight torch.Size([128])
layer2.6.bn2.bias torch.Size([128])
layer2.6.conv3.weight torch.Size([512, 128, 1, 1])
layer2.6.bn3.weight torch.Size([512])
layer2.6.bn3.bias torch.Size([512])
layer2.7.conv1.weight torch.Size([128, 512, 1, 1])
layer2.7.bn1.weight torch.Size([128])
layer2.7.bn1.bias torch.Size([128])
layer2.7.conv2.weight torch.Size([128, 128, 3, 3])
layer2.7.bn2.weight torch.Size([128])
layer2.7.bn2.bias torch.Size([128])
layer2.7.conv3.weight torch.Size([512, 128, 1, 1])
layer2.7.bn3.weight torch.Size([512])
layer2.7.bn3.bias torch.Size([512])
layer3.0.conv1.weight torch.Size([256, 512, 1, 1])
layer3.0.bn1.weight torch.Size([256])
layer3.0.bn1.bias torch.Size([256])
layer3.0.conv2.weight torch.Size([256, 256, 3, 3])
layer3.0.bn2.weight torch.Size([256])
layer3.0.bn2.bias torch.Size([256])
layer3.0.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.0.bn3.weight torch.Size([1024])
layer3.0.bn3.bias torch.Size([1024])
layer3.0.downsample.0.weight torch.Size([1024, 512, 1, 1])
layer3.0.downsample.1.weight torch.Size([1024])
layer3.0.downsample.1.bias torch.Size([1024])
layer3.1.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.1.bn1.weight torch.Size([256])
layer3.1.bn1.bias torch.Size([256])
layer3.1.conv2.weight torch.Size([256, 256, 3, 3])
layer3.1.bn2.weight torch.Size([256])
layer3.1.bn2.bias torch.Size([256])
layer3.1.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.1.bn3.weight torch.Size([1024])
layer3.1.bn3.bias torch.Size([1024])
layer3.2.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.2.bn1.weight torch.Size([256])
layer3.2.bn1.bias torch.Size([256])
layer3.2.conv2.weight torch.Size([256, 256, 3, 3])
layer3.2.bn2.weight torch.Size([256])
layer3.2.bn2.bias torch.Size([256])
layer3.2.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.2.bn3.weight torch.Size([1024])
layer3.2.bn3.bias torch.Size([1024])
layer3.3.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.3.bn1.weight torch.Size([256])
layer3.3.bn1.bias torch.Size([256])
layer3.3.conv2.weight torch.Size([256, 256, 3, 3])
layer3.3.bn2.weight torch.Size([256])
layer3.3.bn2.bias torch.Size([256])
layer3.3.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.3.bn3.weight torch.Size([1024])
layer3.3.bn3.bias torch.Size([1024])
layer3.4.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.4.bn1.weight torch.Size([256])
layer3.4.bn1.bias torch.Size([256])
layer3.4.conv2.weight torch.Size([256, 256, 3, 3])
layer3.4.bn2.weight torch.Size([256])
layer3.4.bn2.bias torch.Size([256])
layer3.4.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.4.bn3.weight torch.Size([1024])
layer3.4.bn3.bias torch.Size([1024])
layer3.5.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.5.bn1.weight torch.Size([256])
layer3.5.bn1.bias torch.Size([256])
layer3.5.conv2.weight torch.Size([256, 256, 3, 3])
layer3.5.bn2.weight torch.Size([256])
layer3.5.bn2.bias torch.Size([256])
layer3.5.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.5.bn3.weight torch.Size([1024])
layer3.5.bn3.bias torch.Size([1024])
layer3.6.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.6.bn1.weight torch.Size([256])
layer3.6.bn1.bias torch.Size([256])
layer3.6.conv2.weight torch.Size([256, 256, 3, 3])
layer3.6.bn2.weight torch.Size([256])
layer3.6.bn2.bias torch.Size([256])
layer3.6.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.6.bn3.weight torch.Size([1024])
layer3.6.bn3.bias torch.Size([1024])
layer3.7.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.7.bn1.weight torch.Size([256])
layer3.7.bn1.bias torch.Size([256])
layer3.7.conv2.weight torch.Size([256, 256, 3, 3])
layer3.7.bn2.weight torch.Size([256])
layer3.7.bn2.bias torch.Size([256])
layer3.7.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.7.bn3.weight torch.Size([1024])
layer3.7.bn3.bias torch.Size([1024])
layer3.8.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.8.bn1.weight torch.Size([256])
layer3.8.bn1.bias torch.Size([256])
layer3.8.conv2.weight torch.Size([256, 256, 3, 3])
layer3.8.bn2.weight torch.Size([256])
layer3.8.bn2.bias torch.Size([256])
layer3.8.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.8.bn3.weight torch.Size([1024])
layer3.8.bn3.bias torch.Size([1024])
layer3.9.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.9.bn1.weight torch.Size([256])
layer3.9.bn1.bias torch.Size([256])
layer3.9.conv2.weight torch.Size([256, 256, 3, 3])
layer3.9.bn2.weight torch.Size([256])
layer3.9.bn2.bias torch.Size([256])
layer3.9.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.9.bn3.weight torch.Size([1024])
layer3.9.bn3.bias torch.Size([1024])
layer3.10.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.10.bn1.weight torch.Size([256])
layer3.10.bn1.bias torch.Size([256])
layer3.10.conv2.weight torch.Size([256, 256, 3, 3])
layer3.10.bn2.weight torch.Size([256])
layer3.10.bn2.bias torch.Size([256])
layer3.10.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.10.bn3.weight torch.Size([1024])
layer3.10.bn3.bias torch.Size([1024])
layer3.11.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.11.bn1.weight torch.Size([256])
layer3.11.bn1.bias torch.Size([256])
layer3.11.conv2.weight torch.Size([256, 256, 3, 3])
layer3.11.bn2.weight torch.Size([256])
layer3.11.bn2.bias torch.Size([256])
layer3.11.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.11.bn3.weight torch.Size([1024])
layer3.11.bn3.bias torch.Size([1024])
layer3.12.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.12.bn1.weight torch.Size([256])
layer3.12.bn1.bias torch.Size([256])
layer3.12.conv2.weight torch.Size([256, 256, 3, 3])
layer3.12.bn2.weight torch.Size([256])
layer3.12.bn2.bias torch.Size([256])
layer3.12.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.12.bn3.weight torch.Size([1024])
layer3.12.bn3.bias torch.Size([1024])
layer3.13.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.13.bn1.weight torch.Size([256])
layer3.13.bn1.bias torch.Size([256])
layer3.13.conv2.weight torch.Size([256, 256, 3, 3])
layer3.13.bn2.weight torch.Size([256])
layer3.13.bn2.bias torch.Size([256])
layer3.13.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.13.bn3.weight torch.Size([1024])
layer3.13.bn3.bias torch.Size([1024])
layer3.14.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.14.bn1.weight torch.Size([256])
layer3.14.bn1.bias torch.Size([256])
layer3.14.conv2.weight torch.Size([256, 256, 3, 3])
layer3.14.bn2.weight torch.Size([256])
layer3.14.bn2.bias torch.Size([256])
layer3.14.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.14.bn3.weight torch.Size([1024])
layer3.14.bn3.bias torch.Size([1024])
layer3.15.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.15.bn1.weight torch.Size([256])
layer3.15.bn1.bias torch.Size([256])
layer3.15.conv2.weight torch.Size([256, 256, 3, 3])
layer3.15.bn2.weight torch.Size([256])
layer3.15.bn2.bias torch.Size([256])
layer3.15.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.15.bn3.weight torch.Size([1024])
layer3.15.bn3.bias torch.Size([1024])
layer3.16.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.16.bn1.weight torch.Size([256])
layer3.16.bn1.bias torch.Size([256])
layer3.16.conv2.weight torch.Size([256, 256, 3, 3])
layer3.16.bn2.weight torch.Size([256])
layer3.16.bn2.bias torch.Size([256])
layer3.16.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.16.bn3.weight torch.Size([1024])
layer3.16.bn3.bias torch.Size([1024])
layer3.17.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.17.bn1.weight torch.Size([256])
layer3.17.bn1.bias torch.Size([256])
layer3.17.conv2.weight torch.Size([256, 256, 3, 3])
layer3.17.bn2.weight torch.Size([256])
layer3.17.bn2.bias torch.Size([256])
layer3.17.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.17.bn3.weight torch.Size([1024])
layer3.17.bn3.bias torch.Size([1024])
layer3.18.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.18.bn1.weight torch.Size([256])
layer3.18.bn1.bias torch.Size([256])
layer3.18.conv2.weight torch.Size([256, 256, 3, 3])
layer3.18.bn2.weight torch.Size([256])
layer3.18.bn2.bias torch.Size([256])
layer3.18.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.18.bn3.weight torch.Size([1024])
layer3.18.bn3.bias torch.Size([1024])
layer3.19.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.19.bn1.weight torch.Size([256])
layer3.19.bn1.bias torch.Size([256])
layer3.19.conv2.weight torch.Size([256, 256, 3, 3])
layer3.19.bn2.weight torch.Size([256])
layer3.19.bn2.bias torch.Size([256])
layer3.19.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.19.bn3.weight torch.Size([1024])
layer3.19.bn3.bias torch.Size([1024])
layer3.20.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.20.bn1.weight torch.Size([256])
layer3.20.bn1.bias torch.Size([256])
layer3.20.conv2.weight torch.Size([256, 256, 3, 3])
layer3.20.bn2.weight torch.Size([256])
layer3.20.bn2.bias torch.Size([256])
layer3.20.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.20.bn3.weight torch.Size([1024])
layer3.20.bn3.bias torch.Size([1024])
layer3.21.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.21.bn1.weight torch.Size([256])
layer3.21.bn1.bias torch.Size([256])
layer3.21.conv2.weight torch.Size([256, 256, 3, 3])
layer3.21.bn2.weight torch.Size([256])
layer3.21.bn2.bias torch.Size([256])
layer3.21.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.21.bn3.weight torch.Size([1024])
layer3.21.bn3.bias torch.Size([1024])
layer3.22.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.22.bn1.weight torch.Size([256])
layer3.22.bn1.bias torch.Size([256])
layer3.22.conv2.weight torch.Size([256, 256, 3, 3])
layer3.22.bn2.weight torch.Size([256])
layer3.22.bn2.bias torch.Size([256])
layer3.22.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.22.bn3.weight torch.Size([1024])
layer3.22.bn3.bias torch.Size([1024])
layer3.23.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.23.bn1.weight torch.Size([256])
layer3.23.bn1.bias torch.Size([256])
layer3.23.conv2.weight torch.Size([256, 256, 3, 3])
layer3.23.bn2.weight torch.Size([256])
layer3.23.bn2.bias torch.Size([256])
layer3.23.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.23.bn3.weight torch.Size([1024])
layer3.23.bn3.bias torch.Size([1024])
layer3.24.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.24.bn1.weight torch.Size([256])
layer3.24.bn1.bias torch.Size([256])
layer3.24.conv2.weight torch.Size([256, 256, 3, 3])
layer3.24.bn2.weight torch.Size([256])
layer3.24.bn2.bias torch.Size([256])
layer3.24.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.24.bn3.weight torch.Size([1024])
layer3.24.bn3.bias torch.Size([1024])
layer3.25.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.25.bn1.weight torch.Size([256])
layer3.25.bn1.bias torch.Size([256])
layer3.25.conv2.weight torch.Size([256, 256, 3, 3])
layer3.25.bn2.weight torch.Size([256])
layer3.25.bn2.bias torch.Size([256])
layer3.25.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.25.bn3.weight torch.Size([1024])
layer3.25.bn3.bias torch.Size([1024])
layer3.26.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.26.bn1.weight torch.Size([256])
layer3.26.bn1.bias torch.Size([256])
layer3.26.conv2.weight torch.Size([256, 256, 3, 3])
layer3.26.bn2.weight torch.Size([256])
layer3.26.bn2.bias torch.Size([256])
layer3.26.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.26.bn3.weight torch.Size([1024])
layer3.26.bn3.bias torch.Size([1024])
layer3.27.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.27.bn1.weight torch.Size([256])
layer3.27.bn1.bias torch.Size([256])
layer3.27.conv2.weight torch.Size([256, 256, 3, 3])
layer3.27.bn2.weight torch.Size([256])
layer3.27.bn2.bias torch.Size([256])
layer3.27.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.27.bn3.weight torch.Size([1024])
layer3.27.bn3.bias torch.Size([1024])
layer3.28.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.28.bn1.weight torch.Size([256])
layer3.28.bn1.bias torch.Size([256])
layer3.28.conv2.weight torch.Size([256, 256, 3, 3])
layer3.28.bn2.weight torch.Size([256])
layer3.28.bn2.bias torch.Size([256])
layer3.28.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.28.bn3.weight torch.Size([1024])
layer3.28.bn3.bias torch.Size([1024])
layer3.29.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.29.bn1.weight torch.Size([256])
layer3.29.bn1.bias torch.Size([256])
layer3.29.conv2.weight torch.Size([256, 256, 3, 3])
layer3.29.bn2.weight torch.Size([256])
layer3.29.bn2.bias torch.Size([256])
layer3.29.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.29.bn3.weight torch.Size([1024])
layer3.29.bn3.bias torch.Size([1024])
layer3.30.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.30.bn1.weight torch.Size([256])
layer3.30.bn1.bias torch.Size([256])
layer3.30.conv2.weight torch.Size([256, 256, 3, 3])
layer3.30.bn2.weight torch.Size([256])
layer3.30.bn2.bias torch.Size([256])
layer3.30.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.30.bn3.weight torch.Size([1024])
layer3.30.bn3.bias torch.Size([1024])
layer3.31.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.31.bn1.weight torch.Size([256])
layer3.31.bn1.bias torch.Size([256])
layer3.31.conv2.weight torch.Size([256, 256, 3, 3])
layer3.31.bn2.weight torch.Size([256])
layer3.31.bn2.bias torch.Size([256])
layer3.31.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.31.bn3.weight torch.Size([1024])
layer3.31.bn3.bias torch.Size([1024])
layer3.32.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.32.bn1.weight torch.Size([256])
layer3.32.bn1.bias torch.Size([256])
layer3.32.conv2.weight torch.Size([256, 256, 3, 3])
layer3.32.bn2.weight torch.Size([256])
layer3.32.bn2.bias torch.Size([256])
layer3.32.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.32.bn3.weight torch.Size([1024])
layer3.32.bn3.bias torch.Size([1024])
layer3.33.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.33.bn1.weight torch.Size([256])
layer3.33.bn1.bias torch.Size([256])
layer3.33.conv2.weight torch.Size([256, 256, 3, 3])
layer3.33.bn2.weight torch.Size([256])
layer3.33.bn2.bias torch.Size([256])
layer3.33.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.33.bn3.weight torch.Size([1024])
layer3.33.bn3.bias torch.Size([1024])
layer3.34.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.34.bn1.weight torch.Size([256])
layer3.34.bn1.bias torch.Size([256])
layer3.34.conv2.weight torch.Size([256, 256, 3, 3])
layer3.34.bn2.weight torch.Size([256])
layer3.34.bn2.bias torch.Size([256])
layer3.34.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.34.bn3.weight torch.Size([1024])
layer3.34.bn3.bias torch.Size([1024])
layer3.35.conv1.weight torch.Size([256, 1024, 1, 1])
layer3.35.bn1.weight torch.Size([256])
layer3.35.bn1.bias torch.Size([256])
layer3.35.conv2.weight torch.Size([256, 256, 3, 3])
layer3.35.bn2.weight torch.Size([256])
layer3.35.bn2.bias torch.Size([256])
layer3.35.conv3.weight torch.Size([1024, 256, 1, 1])
layer3.35.bn3.weight torch.Size([1024])
layer3.35.bn3.bias torch.Size([1024])
layer4.0.conv1.weight torch.Size([512, 1024, 1, 1])
layer4.0.bn1.weight torch.Size([512])
layer4.0.bn1.bias torch.Size([512])
layer4.0.conv2.weight torch.Size([512, 512, 3, 3])
layer4.0.bn2.weight torch.Size([512])
layer4.0.bn2.bias torch.Size([512])
layer4.0.conv3.weight torch.Size([2048, 512, 1, 1])
layer4.0.bn3.weight torch.Size([2048])
layer4.0.bn3.bias torch.Size([2048])
layer4.0.downsample.0.weight torch.Size([2048, 1024, 1, 1])
layer4.0.downsample.1.weight torch.Size([2048])
layer4.0.downsample.1.bias torch.Size([2048])
layer4.1.conv1.weight torch.Size([512, 2048, 1, 1])
layer4.1.bn1.weight torch.Size([512])
layer4.1.bn1.bias torch.Size([512])
layer4.1.conv2.weight torch.Size([512, 512, 3, 3])
layer4.1.bn2.weight torch.Size([512])
layer4.1.bn2.bias torch.Size([512])
layer4.1.conv3.weight torch.Size([2048, 512, 1, 1])
layer4.1.bn3.weight torch.Size([2048])
layer4.1.bn3.bias torch.Size([2048])
layer4.2.conv1.weight torch.Size([512, 2048, 1, 1])
layer4.2.bn1.weight torch.Size([512])
layer4.2.bn1.bias torch.Size([512])
layer4.2.conv2.weight torch.Size([512, 512, 3, 3])
layer4.2.bn2.weight torch.Size([512])
layer4.2.bn2.bias torch.Size([512])
layer4.2.conv3.weight torch.Size([2048, 512, 1, 1])
layer4.2.bn3.weight torch.Size([2048])
layer4.2.bn3.bias torch.Size([2048])
fc.weight torch.Size([1000, 2048])
fc.bias torch.Size([1000])
VE: model ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (layer2): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (3): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (4): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (5): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (7): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (layer3): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (3): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (4): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (5): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (6): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (7): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (8): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (9): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (10): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (11): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (12): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (13): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (14): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (15): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (16): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (17): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (18): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (19): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (20): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (21): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (22): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (23): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (24): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (25): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (26): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (27): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (28): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (29): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (30): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (31): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (32): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (33): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (34): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (35): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (layer4): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc): Linear(in_features=2048, out_features=1000, bias=True)
)
Session Started at t: 2025-04-17 13:50:14.976455
Memory at Training Start (GPU): 230.28 MB
Reserved Memory at Start (GPU): 244.00 MB
conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 64, 112, 112])
bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 64, 112, 112])
relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 64, 112, 112])
maxpool: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 64, 56, 56])
layer1.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.0.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.0: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.1.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.1: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.2.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.2: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer2.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 128, 56, 56])
layer2.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 56, 56]) : torch.Size([1, 128, 56, 56])
layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 56, 56]) : torch.Size([1, 128, 56, 56])
layer2.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 56, 56]) : torch.Size([1, 128, 28, 28])
layer2.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.0.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 512, 28, 28])
layer2.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 512, 28, 28])
layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.0: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 512, 28, 28])
layer2.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.1.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.1: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.2.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.2: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.3.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.3.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.3: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.4.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.4.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.4.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.4.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.4.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.4.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.4: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.5.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.5.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.5.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.5.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.5.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.5.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.5: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.6.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.6.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.6.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.6.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.6.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.6.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.6.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.6.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.6.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.6: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.7.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.7.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.7.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.7.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.7.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.7.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.7.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.7.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.7.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.7: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 512, 28, 28])
layer3.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 256, 28, 28])
layer3.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 28, 28]) : torch.Size([1, 256, 28, 28])
layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 28, 28]) : torch.Size([1, 256, 28, 28])
layer3.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 28, 28]) : torch.Size([1, 256, 14, 14])
layer3.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.0.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 1024, 14, 14])
layer3.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 1024, 14, 14])
layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.0: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 1024, 14, 14])
layer3.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.1.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.1: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.2.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.2: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.3.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.3.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.3: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.4.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.4.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.4: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.5.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.5.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.5: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.6.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.6.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.6.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.6.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.6.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.6.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.6.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.6.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.6.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.6: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.7.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.7.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.7.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.7.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.7.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.7.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.7.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.7.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.7.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.7: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.8.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.8.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.8.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.8.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.8.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.8.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.8.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.8.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.8.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.8: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.9.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.9.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.9.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.9.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.9.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.9.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.9.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.9.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.9.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.9: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.10.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.10.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.10.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.10.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.10.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.10.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.10.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.10.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.10.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.10: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.11.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.11.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.11.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.11.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.11.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.11.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.11.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.11.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.11.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.11: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.12.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.12.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.12.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.12.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.12.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.12.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.12.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.12.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.12.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.12: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.13.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.13.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.13.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.13.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.13.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.13.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.13.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.13.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.13.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.13: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.14.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.14.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.14.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.14.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.14.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.14.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.14.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.14.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.14.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.14: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.15.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.15.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.15.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.15.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.15.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.15.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.15.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.15.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.15.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.15: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.16.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.16.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.16.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.16.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.16.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.16.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.16.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.16.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.16.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.16: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.17.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.17.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.17.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.17.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.17.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.17.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.17.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.17.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.17.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.17: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.18.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.18.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.18.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.18.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.18.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.18.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.18.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.18.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.18.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.18: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.19.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.19.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.19.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.19.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.19.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.19.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.19.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.19.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.19.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.19: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.20.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.20.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.20.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.20.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.20.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.20.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.20.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.20.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.20.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.20: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.21.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.21.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.21.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.21.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.21.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.21.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.21.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.21.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.21.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.21: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.22.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.22.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.22.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.22.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.22.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.22.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.22.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.22.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.22.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.22: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.23.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.23.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.23.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.23.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.23.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.23.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.23.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.23.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.23.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.23: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.24.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.24.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.24.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.24.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.24.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.24.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.24.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.24.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.24.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.24: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.25.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.25.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.25.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.25.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.25.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.25.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.25.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.25.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.25.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.25: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.26.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.26.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.26.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.26.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.26.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.26.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.26.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.26.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.26.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.26: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.27.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.27.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.27.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.27.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.27.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.27.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.27.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.27.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.27.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.27: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.28.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.28.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.28.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.28.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.28.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.28.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.28.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.28.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.28.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.28: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.29.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.29.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.29.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.29.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.29.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.29.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.29.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.29.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.29.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.29: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.30.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.30.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.30.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.30.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.30.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.30.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.30.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.30.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.30.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.30: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.31.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.31.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.31.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.31.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.31.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.31.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.31.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.31.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.31.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.31: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.32.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.32.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.32.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.32.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.32.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.32.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.32.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.32.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.32.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.32: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.33.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.33.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.33.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.33.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.33.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.33.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.33.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.33.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.33.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.33: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.34.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.34.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.34.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.34.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.34.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.34.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.34.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.34.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.34.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.34: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.35.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.35.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.35.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.35.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.35.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.35.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.35.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.35.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.35.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.35: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 1024, 14, 14])
layer4.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 512, 14, 14])
layer4.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
layer4.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 7, 7])
layer4.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.0.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 2048, 7, 7])
layer4.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 2048, 7, 7])
layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.0: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 2048, 7, 7])
layer4.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.1.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.1: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.2.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.2: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 2048, 7, 7])
avgpool: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 1, 1])
fc: <class 'torch.nn.modules.linear.Linear'> : torch.Size([1, 2048]) : torch.Size([1, 1000])
: <class 'torchvision.models.resnet.ResNet'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 1000])
Epoch: [0][      1/1281167]	Time 124.844 (124.844)	Data  0.142 ( 0.142)	Loss 7.0392e+00 (7.0392e+00)	Acc@1   0.00 (  0.00)	Acc@5   0.00 (  0.00)
conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 64, 112, 112])
bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 64, 112, 112])
relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 64, 112, 112])
maxpool: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([1, 64, 112, 112]) : torch.Size([1, 64, 56, 56])
layer1.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.0.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.0.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.0: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.1.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.1.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.1: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 64, 56, 56])
layer1.2.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.2.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1.2: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 256, 56, 56])
layer1: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 64, 56, 56]) : torch.Size([1, 256, 56, 56])
layer2.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 128, 56, 56])
layer2.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 56, 56]) : torch.Size([1, 128, 56, 56])
layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 56, 56]) : torch.Size([1, 128, 56, 56])
layer2.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 56, 56]) : torch.Size([1, 128, 28, 28])
layer2.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.0.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.0.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 512, 28, 28])
layer2.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 512, 28, 28])
layer2.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.0: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 512, 28, 28])
layer2.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.1.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.1.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.1: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.2.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.2.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.2: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.3.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.3.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.3.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.3: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.4.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.4.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.4.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.4.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.4.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.4.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.4: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.5.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.5.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.5.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.5.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.5.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.5.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.5: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.6.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.6.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.6.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.6.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.6.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.6.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.6.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.6.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.6.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.6: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.7.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.7.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.7.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.7.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.7.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.7.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 128, 28, 28])
layer2.7.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 128, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.7.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.7.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2.7: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 512, 28, 28])
layer2: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 256, 56, 56]) : torch.Size([1, 512, 28, 28])
layer3.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 256, 28, 28])
layer3.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 28, 28]) : torch.Size([1, 256, 28, 28])
layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 28, 28]) : torch.Size([1, 256, 28, 28])
layer3.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 28, 28]) : torch.Size([1, 256, 14, 14])
layer3.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.0.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.0.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 1024, 14, 14])
layer3.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 1024, 14, 14])
layer3.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.0: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 1024, 14, 14])
layer3.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.1.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.1.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.1: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.2.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.2.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.2: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.3.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.3.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.3.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.3.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.3: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.4.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.4.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.4.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.4.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.4: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.5.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.5.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.5.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.5.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.5: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.6.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.6.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.6.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.6.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.6.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.6.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.6.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.6.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.6.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.6: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.7.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.7.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.7.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.7.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.7.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.7.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.7.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.7.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.7.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.7: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.8.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.8.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.8.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.8.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.8.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.8.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.8.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.8.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.8.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.8: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.9.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.9.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.9.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.9.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.9.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.9.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.9.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.9.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.9.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.9: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.10.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.10.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.10.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.10.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.10.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.10.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.10.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.10.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.10.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.10: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.11.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.11.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.11.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.11.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.11.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.11.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.11.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.11.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.11.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.11: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.12.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.12.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.12.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.12.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.12.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.12.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.12.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.12.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.12.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.12: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.13.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.13.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.13.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.13.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.13.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.13.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.13.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.13.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.13.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.13: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.14.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.14.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.14.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.14.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.14.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.14.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.14.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.14.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.14.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.14: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.15.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.15.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.15.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.15.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.15.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.15.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.15.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.15.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.15.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.15: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.16.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.16.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.16.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.16.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.16.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.16.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.16.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.16.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.16.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.16: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.17.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.17.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.17.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.17.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.17.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.17.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.17.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.17.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.17.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.17: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.18.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.18.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.18.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.18.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.18.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.18.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.18.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.18.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.18.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.18: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.19.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.19.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.19.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.19.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.19.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.19.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.19.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.19.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.19.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.19: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.20.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.20.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.20.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.20.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.20.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.20.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.20.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.20.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.20.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.20: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.21.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.21.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.21.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.21.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.21.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.21.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.21.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.21.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.21.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.21: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.22.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.22.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.22.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.22.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.22.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.22.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.22.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.22.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.22.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.22: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.23.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.23.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.23.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.23.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.23.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.23.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.23.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.23.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.23.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.23: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.24.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.24.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.24.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.24.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.24.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.24.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.24.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.24.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.24.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.24: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.25.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.25.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.25.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.25.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.25.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.25.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.25.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.25.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.25.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.25: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.26.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.26.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.26.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.26.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.26.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.26.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.26.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.26.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.26.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.26: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.27.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.27.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.27.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.27.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.27.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.27.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.27.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.27.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.27.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.27: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.28.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.28.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.28.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.28.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.28.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.28.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.28.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.28.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.28.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.28: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.29.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.29.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.29.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.29.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.29.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.29.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.29.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.29.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.29.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.29: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.30.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.30.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.30.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.30.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.30.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.30.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.30.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.30.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.30.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.30: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.31.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.31.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.31.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.31.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.31.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.31.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.31.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.31.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.31.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.31: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.32.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.32.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.32.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.32.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.32.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.32.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.32.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.32.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.32.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.32: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.33.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.33.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.33.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.33.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.33.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.33.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.33.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.33.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.33.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.33: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.34.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.34.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.34.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.34.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.34.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.34.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.34.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.34.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.34.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.34: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.35.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.35.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.35.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.35.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.35.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.35.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 256, 14, 14])
layer3.35.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 256, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.35.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.35.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3.35: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 1024, 14, 14])
layer3: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 512, 28, 28]) : torch.Size([1, 1024, 14, 14])
layer4.0.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 512, 14, 14])
layer4.0.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 14, 14])
layer4.0.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 14, 14]) : torch.Size([1, 512, 7, 7])
layer4.0.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.0.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.0.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.0.downsample.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 2048, 7, 7])
layer4.0.downsample.1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.0.downsample: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 2048, 7, 7])
layer4.0.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.0: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 2048, 7, 7])
layer4.1.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.1.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.1.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.1.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.1: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.2.conv1: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.bn1: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.conv2: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.bn2: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 512, 7, 7])
layer4.2.conv3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([1, 512, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.2.bn3: <class 'torch.nn.modules.batchnorm.BatchNorm2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.2.relu: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4.2: <class 'torchvision.models.resnet.Bottleneck'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 7, 7])
layer4: <class 'torch.nn.modules.container.Sequential'> : torch.Size([1, 1024, 14, 14]) : torch.Size([1, 2048, 7, 7])
avgpool: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([1, 2048, 7, 7]) : torch.Size([1, 2048, 1, 1])
fc: <class 'torch.nn.modules.linear.Linear'> : torch.Size([1, 2048]) : torch.Size([1, 1000])
: <class 'torchvision.models.resnet.ResNet'> : torch.Size([1, 3, 224, 224]) : torch.Size([1, 1000])
Test: [    1/50000]	Time  0.202 ( 0.202)	Loss 1.0657e+23 (1.0657e+23)	Acc@1   0.00 (  0.00)	Acc@5   0.00 (  0.00)
 *   Acc@1 0.000 Acc@5 0.000
[GPU] Memory Allocated After Training: 709.71 MB
[GPU] Memory Reserved After Training : 1006.00 MB
Session Completed at : 2025-04-17 13:52:22.290317
Total Compute Time : 0:02:07.313862
